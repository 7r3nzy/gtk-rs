// This file was generated by gir (d8a605d) from gir-files (469db10)
// DO NOT EDIT

use Converter;
use FilterOutputStream;
use OutputStream;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct ConverterOutputStream(Object<ffi::GConverterOutputStream, ffi::GConverterOutputStreamClass>): FilterOutputStream, OutputStream;

    match fn {
        get_type => || ffi::g_converter_output_stream_get_type(),
    }
}

impl ConverterOutputStream {
    pub fn new<P: IsA<OutputStream>, Q: IsA<Converter>>(base_stream: &P, converter: &Q) -> ConverterOutputStream {
        unsafe {
            OutputStream::from_glib_full(ffi::g_converter_output_stream_new(base_stream.to_glib_none().0, converter.to_glib_none().0)).downcast_unchecked()
        }
    }
}

pub trait ConverterOutputStreamExt {
    fn get_converter(&self) -> Option<Converter>;

    fn get_property_converter(&self) -> Option<Converter>;

    fn connect_property_converter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<ConverterOutputStream> + IsA<glib::object::Object>> ConverterOutputStreamExt for O {
    fn get_converter(&self) -> Option<Converter> {
        unsafe {
            from_glib_none(ffi::g_converter_output_stream_get_converter(self.to_glib_none().0))
        }
    }

    fn get_property_converter(&self) -> Option<Converter> {
        unsafe {
            let mut value = Value::from_type(<Converter as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "converter".to_glib_none().0, value.to_glib_none_mut().0);
            value.get()
        }
    }

    fn connect_property_converter_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::converter",
                transmute(notify_converter_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_converter_trampoline<P>(this: *mut ffi::GConverterOutputStream, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<ConverterOutputStream> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&ConverterOutputStream::from_glib_borrow(this).downcast_unchecked())
}
