// This file was generated by gir (4ffdbd3) from gir-files (71d73f0)
// DO NOT EDIT

use MenuModel;
use ffi;
use glib;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct MenuItem(Object<ffi::GMenuItem>);

    match fn {
        get_type => || ffi::g_menu_item_get_type(),
    }
}

impl MenuItem {
    pub fn new<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(label: P, detailed_action: Q) -> MenuItem {
        let label = label.into();
        let label = label.to_glib_none().0;
        let detailed_action = detailed_action.into();
        let detailed_action = detailed_action.to_glib_none().0;
        unsafe {
            from_glib_full(ffi::g_menu_item_new(label, detailed_action))
        }
    }

    #[cfg(feature = "v2_34")]
    pub fn new_from_model<P: IsA<MenuModel>>(model: &P, item_index: i32) -> MenuItem {
        unsafe {
            from_glib_full(ffi::g_menu_item_new_from_model(model.to_glib_none().0, item_index))
        }
    }

    pub fn new_section<'a, P: Into<Option<&'a str>>, Q: IsA<MenuModel>>(label: P, section: &Q) -> MenuItem {
        let label = label.into();
        let label = label.to_glib_none().0;
        unsafe {
            from_glib_full(ffi::g_menu_item_new_section(label, section.to_glib_none().0))
        }
    }

    pub fn new_submenu<'a, P: Into<Option<&'a str>>, Q: IsA<MenuModel>>(label: P, submenu: &Q) -> MenuItem {
        let label = label.into();
        let label = label.to_glib_none().0;
        unsafe {
            from_glib_full(ffi::g_menu_item_new_submenu(label, submenu.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v2_34")]
    //pub fn get_attribute(&self, attribute: &str, format_string: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> bool {
    //    unsafe { TODO: call ffi::g_menu_item_get_attribute() }
    //}

    #[cfg(feature = "v2_34")]
    pub fn get_attribute_value<'a, P: Into<Option<&'a glib::VariantTy>>>(&self, attribute: &str, expected_type: P) -> Option<glib::Variant> {
        let expected_type = expected_type.into();
        let expected_type = expected_type.to_glib_none().0;
        unsafe {
            from_glib_full(ffi::g_menu_item_get_attribute_value(self.to_glib_none().0, attribute.to_glib_none().0, expected_type))
        }
    }

    #[cfg(feature = "v2_34")]
    pub fn get_link(&self, link: &str) -> Option<MenuModel> {
        unsafe {
            from_glib_full(ffi::g_menu_item_get_link(self.to_glib_none().0, link.to_glib_none().0))
        }
    }

    //pub fn set_action_and_target<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, action: P, format_string: Q, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call ffi::g_menu_item_set_action_and_target() }
    //}

    pub fn set_action_and_target_value<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b glib::Variant>>>(&self, action: P, target_value: Q) {
        let action = action.into();
        let action = action.to_glib_none().0;
        let target_value = target_value.into();
        let target_value = target_value.to_glib_none().0;
        unsafe {
            ffi::g_menu_item_set_action_and_target_value(self.to_glib_none().0, action, target_value);
        }
    }

    //pub fn set_attribute<'a, P: Into<Option<&'a str>>>(&self, attribute: &str, format_string: P, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call ffi::g_menu_item_set_attribute() }
    //}

    pub fn set_attribute_value<'a, P: Into<Option<&'a glib::Variant>>>(&self, attribute: &str, value: P) {
        let value = value.into();
        let value = value.to_glib_none().0;
        unsafe {
            ffi::g_menu_item_set_attribute_value(self.to_glib_none().0, attribute.to_glib_none().0, value);
        }
    }

    pub fn set_detailed_action(&self, detailed_action: &str) {
        unsafe {
            ffi::g_menu_item_set_detailed_action(self.to_glib_none().0, detailed_action.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_38")]
    //pub fn set_icon<P: IsA</*Ignored*/Icon>>(&self, icon: &P) {
    //    unsafe { TODO: call ffi::g_menu_item_set_icon() }
    //}

    pub fn set_label<'a, P: Into<Option<&'a str>>>(&self, label: P) {
        let label = label.into();
        let label = label.to_glib_none().0;
        unsafe {
            ffi::g_menu_item_set_label(self.to_glib_none().0, label);
        }
    }

    pub fn set_link<'a, P: IsA<MenuModel> + 'a, Q: Into<Option<&'a P>>>(&self, link: &str, model: Q) {
        let model = model.into();
        let model = model.to_glib_none().0;
        unsafe {
            ffi::g_menu_item_set_link(self.to_glib_none().0, link.to_glib_none().0, model);
        }
    }

    pub fn set_section<'a, P: IsA<MenuModel> + 'a, Q: Into<Option<&'a P>>>(&self, section: Q) {
        let section = section.into();
        let section = section.to_glib_none().0;
        unsafe {
            ffi::g_menu_item_set_section(self.to_glib_none().0, section);
        }
    }

    pub fn set_submenu<'a, P: IsA<MenuModel> + 'a, Q: Into<Option<&'a P>>>(&self, submenu: Q) {
        let submenu = submenu.into();
        let submenu = submenu.to_glib_none().0;
        unsafe {
            ffi::g_menu_item_set_submenu(self.to_glib_none().0, submenu);
        }
    }
}
