// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use InetAddress;
use SocketAddress;
use SocketConnectable;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib_wrapper! {
    pub struct InetSocketAddress(Object<ffi::GInetSocketAddress, ffi::GInetSocketAddressClass>): SocketAddress, SocketConnectable;

    match fn {
        get_type => || ffi::g_inet_socket_address_get_type(),
    }
}

impl InetSocketAddress {
    pub fn new(address: &InetAddress, port: u16) -> InetSocketAddress {
        unsafe {
            SocketAddress::from_glib_full(ffi::g_inet_socket_address_new(address.to_glib_none().0, port)).downcast_unchecked()
        }
    }

    #[cfg(any(feature = "v2_40", feature = "dox"))]
    pub fn new_from_string(address: &str, port: u32) -> InetSocketAddress {
        unsafe {
            SocketAddress::from_glib_full(ffi::g_inet_socket_address_new_from_string(address.to_glib_none().0, port)).downcast_unchecked()
        }
    }
}

unsafe impl Send for InetSocketAddress {}
unsafe impl Sync for InetSocketAddress {}

pub trait InetSocketAddressExt: 'static {
    fn get_address(&self) -> Option<InetAddress>;

    fn get_flowinfo(&self) -> u32;

    fn get_port(&self) -> u16;

    fn get_scope_id(&self) -> u32;
}

impl<O: IsA<InetSocketAddress>> InetSocketAddressExt for O {
    fn get_address(&self) -> Option<InetAddress> {
        unsafe {
            from_glib_none(ffi::g_inet_socket_address_get_address(self.to_glib_none().0))
        }
    }

    fn get_flowinfo(&self) -> u32 {
        unsafe {
            ffi::g_inet_socket_address_get_flowinfo(self.to_glib_none().0)
        }
    }

    fn get_port(&self) -> u16 {
        unsafe {
            ffi::g_inet_socket_address_get_port(self.to_glib_none().0)
        }
    }

    fn get_scope_id(&self) -> u32 {
        unsafe {
            ffi::g_inet_socket_address_get_scope_id(self.to_glib_none().0)
        }
    }
}

impl fmt::Display for InetSocketAddress {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "InetSocketAddress")
    }
}
