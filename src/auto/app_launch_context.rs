// This file was generated by gir (26020e8) from gir-files (11e0e6d)
// DO NOT EDIT

use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct AppLaunchContext(Object<ffi::GAppLaunchContext>);

    match fn {
        get_type => || ffi::g_app_launch_context_get_type(),
    }
}

impl AppLaunchContext {
    pub fn new() -> AppLaunchContext {
        unsafe {
            from_glib_full(ffi::g_app_launch_context_new())
        }
    }

    //pub fn get_display<T: IsA<AppInfo>>(&self, info: &T, files: /*Ignored*/&[File]) -> Option<String> {
    //    unsafe { TODO: call ffi::g_app_launch_context_get_display() }
    //}

    pub fn get_environment(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::g_app_launch_context_get_environment(self.to_glib_none().0))
        }
    }

    //pub fn get_startup_notify_id<T: IsA<AppInfo>>(&self, info: &T, files: /*Ignored*/&[File]) -> Option<String> {
    //    unsafe { TODO: call ffi::g_app_launch_context_get_startup_notify_id() }
    //}

    pub fn launch_failed(&self, startup_notify_id: &str) {
        unsafe {
            ffi::g_app_launch_context_launch_failed(self.to_glib_none().0, startup_notify_id.to_glib_none().0);
        }
    }

    pub fn setenv(&self, variable: &str, value: &str) {
        unsafe {
            ffi::g_app_launch_context_setenv(self.to_glib_none().0, variable.to_glib_none().0, value.to_glib_none().0);
        }
    }

    pub fn unsetenv(&self, variable: &str) {
        unsafe {
            ffi::g_app_launch_context_unsetenv(self.to_glib_none().0, variable.to_glib_none().0);
        }
    }
}
