// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use SocketAddress;
use SocketConnectable;
use UnixSocketAddressType;
use ffi;
use glib;
use glib::StaticType;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct UnixSocketAddress(Object<ffi::GUnixSocketAddress, ffi::GUnixSocketAddressClass>): SocketAddress, SocketConnectable;

    match fn {
        get_type => || ffi::g_unix_socket_address_get_type(),
    }
}

impl UnixSocketAddress {
    //pub fn new_abstract(path: /*Unimplemented*/&CArray TypeId { ns_id: 0, id: 10 }) -> UnixSocketAddress {
    //    unsafe { TODO: call ffi::g_unix_socket_address_new_abstract() }
    //}

    //pub fn new_with_type(path: /*Unimplemented*/&CArray TypeId { ns_id: 0, id: 10 }, type_: UnixSocketAddressType) -> UnixSocketAddress {
    //    unsafe { TODO: call ffi::g_unix_socket_address_new_with_type() }
    //}

    pub fn abstract_names_supported() -> bool {
        unsafe {
            from_glib(ffi::g_unix_socket_address_abstract_names_supported())
        }
    }
}

unsafe impl Send for UnixSocketAddress {}
unsafe impl Sync for UnixSocketAddress {}

pub trait UnixSocketAddressExt {
    fn get_address_type(&self) -> UnixSocketAddressType;

    fn get_is_abstract(&self) -> bool;

    fn get_path_len(&self) -> usize;

    fn get_property_abstract(&self) -> bool;

    //fn get_property_path_as_array(&self) -> /*Ignored*/Option<glib::ByteArray>;

    fn connect_property_abstract_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_address_type_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_path_as_array_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<UnixSocketAddress> + IsA<glib::object::Object>> UnixSocketAddressExt for O {
    fn get_address_type(&self) -> UnixSocketAddressType {
        unsafe {
            from_glib(ffi::g_unix_socket_address_get_address_type(self.to_glib_none().0))
        }
    }

    fn get_is_abstract(&self) -> bool {
        unsafe {
            from_glib(ffi::g_unix_socket_address_get_is_abstract(self.to_glib_none().0))
        }
    }

    fn get_path_len(&self) -> usize {
        unsafe {
            ffi::g_unix_socket_address_get_path_len(self.to_glib_none().0)
        }
    }

    fn get_property_abstract(&self) -> bool {
        unsafe {
            let mut value = Value::from_type(<bool as StaticType>::static_type());
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "abstract".to_glib_none().0, value.to_glib_none_mut().0);
            value.get().unwrap()
        }
    }

    //fn get_property_path_as_array(&self) -> /*Ignored*/Option<glib::ByteArray> {
    //    unsafe {
    //        let mut value = Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        gobject_ffi::g_object_get_property(self.to_glib_none().0, "path-as-array".to_glib_none().0, value.to_glib_none_mut().0);
    //        value.get()
    //    }
    //}

    fn connect_property_abstract_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::abstract",
                transmute(notify_abstract_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_address_type_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::address-type",
                transmute(notify_address_type_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_path_as_array_notify<F: Fn(&Self) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + Send + Sync + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::path-as-array",
                transmute(notify_path_as_array_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_abstract_trampoline<P>(this: *mut ffi::GUnixSocketAddress, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UnixSocketAddress> {
    let f: &&(Fn(&P) + Send + Sync + 'static) = transmute(f);
    f(&UnixSocketAddress::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_address_type_trampoline<P>(this: *mut ffi::GUnixSocketAddress, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UnixSocketAddress> {
    let f: &&(Fn(&P) + Send + Sync + 'static) = transmute(f);
    f(&UnixSocketAddress::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_path_as_array_trampoline<P>(this: *mut ffi::GUnixSocketAddress, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<UnixSocketAddress> {
    let f: &&(Fn(&P) + Send + Sync + 'static) = transmute(f);
    f(&UnixSocketAddress::from_glib_borrow(this).downcast_unchecked())
}
