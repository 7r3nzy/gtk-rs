// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use ffi;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect_raw;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib_wrapper! {
    pub struct AppInfoMonitor(Object<ffi::GAppInfoMonitor, AppInfoMonitorClass>);

    match fn {
        get_type => || ffi::g_app_info_monitor_get_type(),
    }
}

impl AppInfoMonitor {
    #[cfg(any(feature = "v2_40", feature = "dox"))]
    pub fn get() -> AppInfoMonitor {
        unsafe {
            from_glib_full(ffi::g_app_info_monitor_get())
        }
    }
}

pub const NONE_APP_INFO_MONITOR: Option<&AppInfoMonitor> = None;

pub trait AppInfoMonitorExt: 'static {
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<AppInfoMonitor>> AppInfoMonitorExt for O {
    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                transmute(changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn changed_trampoline<P>(this: *mut ffi::GAppInfoMonitor, f: glib_ffi::gpointer)
where P: IsA<AppInfoMonitor> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&AppInfoMonitor::from_glib_borrow(this).unsafe_cast())
}

impl fmt::Display for AppInfoMonitor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AppInfoMonitor")
    }
}
